name: DotNet app deploy to EKS
on:
  push:
    branches: [ "main" ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.24.0' # default is latest stable
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY_API: dotnetefcorewithsqs-api
        REPOSITORY_Worker: dotnetefcorewithsqs-worker
        IMAGE_TAG: 1.8
      run: |
        docker build -t $REGISTRY/$REPOSITORY_API:$GITHUB_SHA -f Dockerfile_Api .
        docker push $REGISTRY/$REPOSITORY_API:$GITHUB_SHA
        docker build -t $REGISTRY/$REPOSITORY_Worker:$GITHUB_SHA -f Dockerfile_Worker .
        docker push $REGISTRY/$REPOSITORY_Worker:$GITHUB_SHA
    - name: Extract Docker image tag
      id: extract-tag
      run: echo "::set-output name=tag::${{ github.sha }}"
           echo "::set-output name=tag1::${{ github.sha }}"
    - name: Update deployment.yaml
      run: |        
        ls
        sed  -e '/dotnetefcorewithsqs-api/ s/:1.8.*$/:${{ steps.extract-tag.outputs.tag }}/' deployment-api.yaml
        sed  -e '/dotnetefcorewithsqs-worker/ s/:1.8.*$/:${{ steps.extract-tag.outputs.tag1 }}/' deployment-worker.yaml
        run: |
        git config --global user.email "dev@demo.com"
        git config --global user.name "demodev"
        git add .
        git commit -m "Update to new version"
        git push
    - name: Update kube config
      run: aws eks update-kubeconfig --name demo-eks    
    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment-api.yaml -n demo
        kubectl apply -f service-api.yaml -n demo
        kubectl apply -f deployment-worker.yaml -n demo
        kubectl apply -f service-worker.yaml -n demo
